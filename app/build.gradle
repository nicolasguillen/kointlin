apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "com.nicolasguillen.kointlin"

        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        versionCode buildConfig.version.code
        versionName buildConfig.version.name

        testInstrumentationRunner "com.nicolasguillen.kointlin.mocks.MockTestRunner"

        vectorDrawables.useSupportLibrary = true

    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        lintConfig rootProject.file('lint.xml')

        // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
        checkReleaseBuilds false
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'kointlin'
            keyAlias 'kointlin'
            keyPassword 'kointlin'
        }
        if (file('kointlin.keystore').exists()) {
            upload {
                storeFile file('kointlin.keystore')
                storePassword propOrEmpty('KOINTLIN_UPLOAD_STORE_PASSWORD')
                keyAlias 'kointlin'
                keyPassword propOrEmpty('KOINTLIN_UPLOAD_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        release {
            if (file('kointlin.keystore').exists()) {
                signingConfig signingConfigs.upload
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles(
                    file('src/main/proguard-android.pro'),
                    file('src/main/proguard-app.pro')
            )
        }
    }

    kapt {
        generateStubs = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    implementation "com.google.android.material:material:${versions.androidX}"
    implementation "androidx.appcompat:appcompat:${versions.androidX}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidX}"
    implementation "androidx.cardview:cardview:${versions.androidX}"
    implementation "androidx.annotation:annotation:${versions.androidX}"
    implementation "androidx.constraintlayout:constraintlayout:1.1.0"

    implementation "androidx.core:core-ktx:${versions.androidX}"

    implementation "io.reactivex.rxjava2:rxjava:2.1.14"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.1.1"

    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    implementation "com.crashlytics.sdk.android:crashlytics:2.9.3"

    implementation "com.squareup.picasso:picasso:2.71828"

    implementation "com.google.dagger:dagger:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-rxjava2:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"

    testImplementation "androidx.test:runner:${versions.atsl}"
    testImplementation "androidx.test:rules:${versions.atsl}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.10.19"

    androidTestImplementation "tools.fastlane:screengrab:1.2.0"
}

apply plugin: 'com.google.gms.google-services'
